Suggestions for Streamlining: many of these scripts contain the same geospatial functions (e.g. row_col_to_utm(); ReprojectCoords(); lat_lon_labels(); zone_boundary())
These could probably be worked into a separate package e.g. "gridmaptools"; you could then do something like import gridmaptools

3d_animation: processes pathline file to create 3D animations of flow (not currently in article or slides but they are quite cool)

capture_time: processes time series file to create plots of time required for well capture (Figure 16)

combined_sensitivity: processes pathline file to create figure demonstrating sensitity of results (vertical and lateral flow) to model extension approach and porosity (Figure 6 and 7)

compute_likely_paths: processes pathline file to come up with a "representative" particle path for each water source; this was used to pass coordinates to DJ for cross-sections (Figure 12)

layer_flow.py: processes endpoint and pathline files to create plot of projected paths with layers called out as colors (Figure 13)

pathline_3d.py: makes 3D pathline plots; these are difficult to render into an image that makes sense; rather these are best used in "interactive" matplotlib mode that allow you to play with the object

plot_head_map.py: makes map of 1971-1975 average heads in all layers in the Montebello Forebay (Figure 10)

process_endpoint.py: analyzes endpoint file and plots stacked bar of layer endpoints (Figure 15) and zone endpoints (not used)

process_pathline.py: the magnum opus, analyzes pathline file and plots pathlines on map-like visuals; lots of options to try out (Figure 9, Figure 14, slide 1, slide 29) 

process_timseries.py: a very slow and inefficient script, analyzes time series file and computes time to leave Montebello Forebay; to use this for the first time set first_time = True and run it overnight, then use first_time = False (Figure 17)

timeseries_animation.py: analyzes time series file and makes animations of particle movement (slides 16-17, not in article)

tracer.py: does linear regression between tracer concentrations and particle #s (Figure 8, top)

tracer_map.py: makes a map of particle locations for three time periods with layers called out as colors (Figure 8, bottom)

xsect_pathline1.py: maps particle paths onto cross-section A-A' (Figure 11)

xsect_pathline2.py: maps particle paths onto "representative" cross-sections (Figure 12)

